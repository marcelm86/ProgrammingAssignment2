A <- matrix(1:4,2,2)
a
A
solve(A)
## First put the matrix into cache
makeCacheMatrix <- function(x = matrix()) {
Am<<- x
}
## Now colculate the inverse and print it
cacheSolve <- function(x, ...) {
Ai<<-solve(Am)
Ai
}
makeCacheMatrix(A)
cacheSolve(A)
## First put the matrix into cache
makeCacheMatrix <- function(x = matrix()) {
Am<<- x
m <<- NULL
Am
}
## Now colculate the inverse and print it
cacheSolve <- function(x, ...) {
if (!is.null(m)){
Ai<<-solve(Am)
}
m<<- Ai
Ai
}
makeCacheMatrix(A)
cacheSolve(A)
makeCacheMatrix(A)
cacheSolve(A)
makeCacheMatrix(A)
A <- matrix(1:6,2,3)
cacheSolve(A)
makeCacheMatrix(A)
cacheSolve(A)
makeCacheMatrix(A)
cacheSolve(A)
solve(Am)
A <- matrix(1:9,3,3)
cacheSolve(A)
makeCacheMatrix(A)
cacheSolve(A)
makeCacheMatrix(A)
## First put the matrix into cache
makeCacheMatrix <- function(x = matrix()) {
Am<<- x
Ai <<- NULL
Am
}
## Now colculate the inverse and print it
cacheSolve <- function(x, ...) {
if (!is.null(Ai)){
Ai<<-solve(Am)
}
Ai
}
cacheSolve(A)
makeCacheMatrix(A)
cacheSolve(A)
makeCacheMatrix(A)
A <- matrix(1:4,2,2)
makeCacheMatrix(A)
cacheSolve(A)
## First put the matrix into cache
makeCacheMatrix <- function(x = matrix()) {
Am<<- x
Ai <<- NULL
Am
}
## Now colculate the inverse and print it
cacheSolve <- function(x, ...) {
if (Ai=null){
Ai<<-solve(Am)
}
Ai
}
## First put the matrix into cache
makeCacheMatrix <- function(x = matrix()) {
Am<<- x
Ai <<- NULL
Am
}
## Now colculate the inverse and print it
cacheSolve <- function(x, ...) {
if (Ai=null){
Ai<<-solve(Am)
}
Ai
}
## First put the matrix into cache
makeCacheMatrix <- function(x = matrix()) {
Am<<- x
Ai <<- NULL
Am
}
## Now colculate the inverse and print it
cacheSolve <- function(x, ...) {
if (Ai=null){
Ai<<-solve(Am)
}
Ai
}
## First put the matrix into cache
makeCacheMatrix <- function(x = matrix()) {
Am<<- x
Ai <<- NULL
Am
}
## Now colculate the inverse and print it
cacheSolve <- function(x, ...) {
if (Ai=null){
Ai<<-solve(Am)
}
Ai
}
## First put the matrix into cache
makeCacheMatrix <- function(x = matrix()) {
Am<<- x
Ai <<- NULL
Am
}
## Now colculate the inverse and print it
cacheSolve <- function(x, ...) {
if (Ai=null){
Ai<<-solve(Am)
}
Ai
}
## First put the matrix into cache
makeCacheMatrix <- function(x = matrix()) {
Am<<- x
Ai <<- NULL
Am
}
## Now colculate the inverse and print it
cacheSolve <- function(x, ...) {
if (Ai=null){
Ai<<-solve(Am)
}
Ai
}
## First put the matrix into cache
makeCacheMatrix <- function(x = matrix()) {
Am<<- x
Ai <<- NULL
Am
}
## Now colculate the inverse and print it
cacheSolve <- function(x, ...) {
if (Ai=null){
Ai<<-solve(Am)
}
Ai
}
## First put the matrix into cache
makeCacheMatrix <- function(x = matrix()) {
Am<<- x
Ai <<- NULL
Am
}
## Now colculate the inverse and print it
cacheSolve <- function(x, ...) {
if (Ai=null){
Ai<<-solve(Am)
}
Ai
}
## First put the matrix into cache
makeCacheMatrix <- function(x = matrix()) {
Am<<- x
Ai <<- NULL
Am
}
## Now colculate the inverse and print it
cacheSolve <- function(x, ...) {
if (Ai==null){
Ai<<-solve(Am)
}
Ai
}
makeCacheMatrix(A)
cacheSolve(A)
## First put the matrix into cache
makeCacheMatrix <- function(x = matrix()) {
Am<<- x
Ai <<- NULL
Am
}
## Now colculate the inverse and print it
cacheSolve <- function(x, ...) {
if (Ai==Null){
Ai<<-solve(Am)
}
Ai
}
makeCacheMatrix(A)
cacheSolve(A)
## First put the matrix into cache
makeCacheMatrix <- function(x = matrix()) {
Am<<- x
Ai <<- NULL
Am
}
## Now colculate the inverse and print it
cacheSolve <- function(x, ...) {
if (!is.null(Ai)){
Ai<-solve(Am)
}
Ai
}
makeCacheMatrix(A)
cacheSolve(A)
debug(cachesolve)
debug(cacheSolve)
cacheSolve(A)
cacheSolve(A)
Ai
Ai
makeCacheMatrix(A)
cacheSolve(A)
!is.null(Ai)
## First put the matrix into cache
makeCacheMatrix <- function(x = matrix()) {
Am<<- x
Ai <<- NULL
Am
}
## Now colculate the inverse and print it
cacheSolve <- function(x, ...) {
if (!is.NULL(Ai)){
Ai<<-solve(Am)
}
Ai
}
makeCacheMatrix(A)
cacheSolve(A)
## First put the matrix into cache
makeCacheMatrix <- function(x = matrix()) {
Am<<- x
Ai <<- NULL
Am
}
## Now colculate the inverse and print it
cacheSolve <- function(x, ...) {
if (is.null(Ai)){
Ai<<-solve(Am)
}
Ai
}
makeCacheMatrix(A)
cacheSolve(A)
